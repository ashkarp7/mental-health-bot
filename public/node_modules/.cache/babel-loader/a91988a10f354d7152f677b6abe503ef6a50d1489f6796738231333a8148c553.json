{"ast":null,"code":"// src/services/voiceRecognition.js\n\nlet mediaRecorder = null;\nlet audioChunks = [];\nlet recognition = null;\n\n// Initialize Speech Recognition\nconst initializeSpeechRecognition = () => {\n  if ('webkitSpeechRecognition' in window) {\n    recognition = new window.webkitSpeechRecognition();\n  } else if ('SpeechRecognition' in window) {\n    recognition = new window.SpeechRecognition();\n  } else {\n    console.warn('Speech recognition not supported in this browser');\n    return null;\n  }\n  recognition.continuous = false;\n  recognition.interimResults = false;\n  recognition.lang = 'en-US';\n  return recognition;\n};\n\n// Start voice recording with Web Audio API\nexport const startVoiceRecording = async (onResult, onError) => {\n  try {\n    // Initialize speech recognition\n    if (!recognition) {\n      recognition = initializeSpeechRecognition();\n    }\n    if (!recognition) {\n      throw new Error('Speech recognition not supported');\n    }\n\n    // Get microphone access\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        sampleRate: 44100\n      }\n    });\n\n    // Setup MediaRecorder for audio recording\n    mediaRecorder = new MediaRecorder(stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    audioChunks = [];\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) {\n        audioChunks.push(event.data);\n      }\n    };\n    mediaRecorder.onstop = () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: 'audio/webm'\n      });\n      // You can process the audio blob here if needed\n      console.log('Audio recording stopped, blob size:', audioBlob.size);\n    };\n\n    // Setup speech recognition handlers\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n    };\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      console.log('Speech recognition result:', transcript);\n      if (onResult) {\n        onResult(transcript);\n      }\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n      if (onError) {\n        onError(event.error);\n      }\n    };\n    recognition.onend = () => {\n      console.log('Speech recognition ended');\n      // Stop media recorder and release microphone\n      if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n        mediaRecorder.stop();\n      }\n\n      // Stop all audio tracks to release microphone\n      stream.getTracks().forEach(track => track.stop());\n    };\n\n    // Start recording\n    mediaRecorder.start();\n    recognition.start();\n    return true;\n  } catch (error) {\n    console.error('Error starting voice recording:', error);\n    if (onError) {\n      onError(error.message);\n    }\n    return false;\n  }\n};\n\n// Stop voice recording\nexport const stopVoiceRecording = () => {\n  try {\n    if (recognition) {\n      recognition.stop();\n    }\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n      mediaRecorder.stop();\n    }\n    return true;\n  } catch (error) {\n    console.error('Error stopping voice recording:', error);\n    return false;\n  }\n};\n\n// Check if voice recognition is supported\nexport const isVoiceRecognitionSupported = () => {\n  return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;\n};\n\n// Simple sentiment analysis for voice input\nexport const analyzeVoiceSentiment = transcript => {\n  const lowerTranscript = transcript.toLowerCase();\n  const positiveWords = ['happy', 'good', 'great', 'amazing', 'wonderful', 'excellent', 'fantastic', 'love', 'excited', 'joy'];\n  const negativeWords = ['sad', 'bad', 'terrible', 'awful', 'hate', 'angry', 'frustrated', 'depressed', 'anxious', 'worried'];\n  const stressWords = ['stressed', 'overwhelmed', 'tired', 'exhausted', 'pressure', 'difficult', 'hard', 'struggle'];\n  let positiveScore = 0;\n  let negativeScore = 0;\n  let stressScore = 0;\n  const words = lowerTranscript.split(' ');\n  words.forEach(word => {\n    if (positiveWords.includes(word)) positiveScore++;\n    if (negativeWords.includes(word)) negativeScore++;\n    if (stressWords.includes(word)) stressScore++;\n  });\n  if (stressScore > 0) return 'stressed';\n  if (negativeScore > positiveScore) return 'negative';\n  if (positiveScore > negativeScore) return 'positive';\n  return 'neutral';\n};\n\n// Text-to-Speech for AI responses\nexport const speakText = (text, rate = 1, pitch = 1, volume = 1) => {\n  if ('speechSynthesis' in window) {\n    // Cancel any ongoing speech\n    window.speechSynthesis.cancel();\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.rate = rate;\n    utterance.pitch = pitch;\n    utterance.volume = volume;\n\n    // Try to use a female voice for more empathetic feel\n    const voices = window.speechSynthesis.getVoices();\n    const preferredVoice = voices.find(voice => voice.name.includes('Female') || voice.name.includes('Samantha') || voice.name.includes('Karen') || voice.gender === 'female');\n    if (preferredVoice) {\n      utterance.voice = preferredVoice;\n    }\n    utterance.onstart = () => {\n      console.log('Text-to-speech started');\n    };\n    utterance.onend = () => {\n      console.log('Text-to-speech ended');\n    };\n    utterance.onerror = event => {\n      console.error('Text-to-speech error:', event);\n    };\n    window.speechSynthesis.speak(utterance);\n    return true;\n  } else {\n    console.warn('Text-to-speech not supported in this browser');\n    return false;\n  }\n};\n\n// Stop text-to-speech\nexport const stopSpeaking = () => {\n  if ('speechSynthesis' in window) {\n    window.speechSynthesis.cancel();\n    return true;\n  }\n  return false;\n};\n\n// Get available voices\nexport const getAvailableVoices = () => {\n  if ('speechSynthesis' in window) {\n    return window.speechSynthesis.getVoices();\n  }\n  return [];\n};\nexport default {\n  startVoiceRecording,\n  stopVoiceRecording,\n  isVoiceRecognitionSupported,\n  analyzeVoiceSentiment,\n  speakText,\n  stopSpeaking,\n  getAvailableVoices\n};","map":{"version":3,"names":["mediaRecorder","audioChunks","recognition","initializeSpeechRecognition","window","webkitSpeechRecognition","SpeechRecognition","console","warn","continuous","interimResults","lang","startVoiceRecording","onResult","onError","Error","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","sampleRate","MediaRecorder","mimeType","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","type","log","onstart","onresult","transcript","results","onerror","error","onend","state","stop","getTracks","forEach","track","start","message","stopVoiceRecording","isVoiceRecognitionSupported","analyzeVoiceSentiment","lowerTranscript","toLowerCase","positiveWords","negativeWords","stressWords","positiveScore","negativeScore","stressScore","words","split","word","includes","speakText","text","rate","pitch","volume","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","voices","getVoices","preferredVoice","find","voice","name","gender","speak","stopSpeaking","getAvailableVoices"],"sources":["C:/Users/moham/OneDrive/Desktop/mental-health-bot/src/services/voiceRecognition.js"],"sourcesContent":["// src/services/voiceRecognition.js\r\n\r\nlet mediaRecorder = null;\r\nlet audioChunks = [];\r\nlet recognition = null;\r\n\r\n// Initialize Speech Recognition\r\nconst initializeSpeechRecognition = () => {\r\n  if ('webkitSpeechRecognition' in window) {\r\n    recognition = new window.webkitSpeechRecognition();\r\n  } else if ('SpeechRecognition' in window) {\r\n    recognition = new window.SpeechRecognition();\r\n  } else {\r\n    console.warn('Speech recognition not supported in this browser');\r\n    return null;\r\n  }\r\n\r\n  recognition.continuous = false;\r\n  recognition.interimResults = false;\r\n  recognition.lang = 'en-US';\r\n\r\n  return recognition;\r\n};\r\n\r\n// Start voice recording with Web Audio API\r\nexport const startVoiceRecording = async (onResult, onError) => {\r\n  try {\r\n    // Initialize speech recognition\r\n    if (!recognition) {\r\n      recognition = initializeSpeechRecognition();\r\n    }\r\n\r\n    if (!recognition) {\r\n      throw new Error('Speech recognition not supported');\r\n    }\r\n\r\n    // Get microphone access\r\n    const stream = await navigator.mediaDevices.getUserMedia({ \r\n      audio: {\r\n        echoCancellation: true,\r\n        noiseSuppression: true,\r\n        sampleRate: 44100\r\n      } \r\n    });\r\n\r\n    // Setup MediaRecorder for audio recording\r\n    mediaRecorder = new MediaRecorder(stream, {\r\n      mimeType: 'audio/webm;codecs=opus'\r\n    });\r\n\r\n    audioChunks = [];\r\n\r\n    mediaRecorder.ondataavailable = (event) => {\r\n      if (event.data.size > 0) {\r\n        audioChunks.push(event.data);\r\n      }\r\n    };\r\n\r\n    mediaRecorder.onstop = () => {\r\n      const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\r\n      // You can process the audio blob here if needed\r\n      console.log('Audio recording stopped, blob size:', audioBlob.size);\r\n    };\r\n\r\n    // Setup speech recognition handlers\r\n    recognition.onstart = () => {\r\n      console.log('Speech recognition started');\r\n    };\r\n\r\n    recognition.onresult = (event) => {\r\n      const transcript = event.results[0][0].transcript;\r\n      console.log('Speech recognition result:', transcript);\r\n      if (onResult) {\r\n        onResult(transcript);\r\n      }\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error('Speech recognition error:', event.error);\r\n      if (onError) {\r\n        onError(event.error);\r\n      }\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      console.log('Speech recognition ended');\r\n      // Stop media recorder and release microphone\r\n      if (mediaRecorder && mediaRecorder.state !== 'inactive') {\r\n        mediaRecorder.stop();\r\n      }\r\n      \r\n      // Stop all audio tracks to release microphone\r\n      stream.getTracks().forEach(track => track.stop());\r\n    };\r\n\r\n    // Start recording\r\n    mediaRecorder.start();\r\n    recognition.start();\r\n\r\n    return true;\r\n\r\n  } catch (error) {\r\n    console.error('Error starting voice recording:', error);\r\n    if (onError) {\r\n      onError(error.message);\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\n// Stop voice recording\r\nexport const stopVoiceRecording = () => {\r\n  try {\r\n    if (recognition) {\r\n      recognition.stop();\r\n    }\r\n\r\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\r\n      mediaRecorder.stop();\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error stopping voice recording:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Check if voice recognition is supported\r\nexport const isVoiceRecognitionSupported = () => {\r\n  return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;\r\n};\r\n\r\n// Simple sentiment analysis for voice input\r\nexport const analyzeVoiceSentiment = (transcript) => {\r\n  const lowerTranscript = transcript.toLowerCase();\r\n  \r\n  const positiveWords = ['happy', 'good', 'great', 'amazing', 'wonderful', 'excellent', 'fantastic', 'love', 'excited', 'joy'];\r\n  const negativeWords = ['sad', 'bad', 'terrible', 'awful', 'hate', 'angry', 'frustrated', 'depressed', 'anxious', 'worried'];\r\n  const stressWords = ['stressed', 'overwhelmed', 'tired', 'exhausted', 'pressure', 'difficult', 'hard', 'struggle'];\r\n\r\n  let positiveScore = 0;\r\n  let negativeScore = 0;\r\n  let stressScore = 0;\r\n\r\n  const words = lowerTranscript.split(' ');\r\n\r\n  words.forEach(word => {\r\n    if (positiveWords.includes(word)) positiveScore++;\r\n    if (negativeWords.includes(word)) negativeScore++;\r\n    if (stressWords.includes(word)) stressScore++;\r\n  });\r\n\r\n  if (stressScore > 0) return 'stressed';\r\n  if (negativeScore > positiveScore) return 'negative';\r\n  if (positiveScore > negativeScore) return 'positive';\r\n  return 'neutral';\r\n};\r\n\r\n// Text-to-Speech for AI responses\r\nexport const speakText = (text, rate = 1, pitch = 1, volume = 1) => {\r\n  if ('speechSynthesis' in window) {\r\n    // Cancel any ongoing speech\r\n    window.speechSynthesis.cancel();\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.rate = rate;\r\n    utterance.pitch = pitch;\r\n    utterance.volume = volume;\r\n    \r\n    // Try to use a female voice for more empathetic feel\r\n    const voices = window.speechSynthesis.getVoices();\r\n    const preferredVoice = voices.find(voice => \r\n      voice.name.includes('Female') || \r\n      voice.name.includes('Samantha') ||\r\n      voice.name.includes('Karen') ||\r\n      voice.gender === 'female'\r\n    );\r\n    \r\n    if (preferredVoice) {\r\n      utterance.voice = preferredVoice;\r\n    }\r\n\r\n    utterance.onstart = () => {\r\n      console.log('Text-to-speech started');\r\n    };\r\n\r\n    utterance.onend = () => {\r\n      console.log('Text-to-speech ended');\r\n    };\r\n\r\n    utterance.onerror = (event) => {\r\n      console.error('Text-to-speech error:', event);\r\n    };\r\n\r\n    window.speechSynthesis.speak(utterance);\r\n    return true;\r\n  } else {\r\n    console.warn('Text-to-speech not supported in this browser');\r\n    return false;\r\n  }\r\n};\r\n\r\n// Stop text-to-speech\r\nexport const stopSpeaking = () => {\r\n  if ('speechSynthesis' in window) {\r\n    window.speechSynthesis.cancel();\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Get available voices\r\nexport const getAvailableVoices = () => {\r\n  if ('speechSynthesis' in window) {\r\n    return window.speechSynthesis.getVoices();\r\n  }\r\n  return [];\r\n};\r\n\r\nexport default {\r\n  startVoiceRecording,\r\n  stopVoiceRecording,\r\n  isVoiceRecognitionSupported,\r\n  analyzeVoiceSentiment,\r\n  speakText,\r\n  stopSpeaking,\r\n  getAvailableVoices\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}