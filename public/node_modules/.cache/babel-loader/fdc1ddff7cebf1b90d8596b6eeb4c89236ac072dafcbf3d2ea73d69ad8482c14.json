{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\mental-health-bot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// Import components\nimport LoginForm from './components/Auth/LoginForm';\nimport SignUpForm from './components/Auth/SignUpForm';\nimport ChatInterface from './components/Chat/ChatInterface';\nimport Header from './components/UI/Header';\nimport Sidebar from './components/UI/Sidebar';\nimport MoodSelector from './components/Wellness/MoodSelector';\nimport BreathingExercise from './components/Wellness/BreathingExercise';\nimport WellnessTools from './components/Wellness/WellnessTools';\n\n// Import services\nimport { saveToStorage, loadFromStorage } from './services/localStorage';\nimport { generateAIResponse } from './services/llmApi';\n\n// Import utilities\nimport { detectMoodFromText, detectCrisisKeywords, getWellnessTip, getEmergencyResources } from './utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Authentication state\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [authMode, setAuthMode] = useState('login'); // 'login' or 'signup'\n\n  // Chat state\n  const [messages, setMessages] = useState([]);\n  const [currentMood, setCurrentMood] = useState('neutral');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // UI state\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showBreathingExercise, setShowBreathingExercise] = useState(false);\n  const [showWellnessTools, setShowWellnessTools] = useState(false);\n  const [showMoodSelector, setShowMoodSelector] = useState(false);\n\n  // Mood history for tracking\n  const [moodHistory, setMoodHistory] = useState([]);\n\n  // Initialize app on mount\n  useEffect(() => {\n    initializeApp();\n  }, []);\n\n  // Save data when user or messages change\n  useEffect(() => {\n    if (currentUser) {\n      saveUserData();\n    }\n  }, [currentUser, messages, moodHistory]);\n  const initializeApp = () => {\n    // Check for existing user session\n    const savedUser = loadFromStorage('currentUser');\n    if (savedUser) {\n      setCurrentUser(savedUser);\n      setIsAuthenticated(true);\n      loadUserData(savedUser.id);\n    }\n\n    // Show mood selector for first-time users\n    const hasShownMoodSelector = loadFromStorage('hasShownMoodSelector');\n    if (!hasShownMoodSelector && savedUser) {\n      setShowMoodSelector(true);\n      saveToStorage('hasShownMoodSelector', true);\n    }\n  };\n  const loadUserData = userId => {\n    const userData = loadFromStorage(`user_${userId}`);\n    if (userData) {\n      setMessages(userData.messages || []);\n      setMoodHistory(userData.moodHistory || []);\n      setCurrentMood(userData.currentMood || 'neutral');\n    }\n  };\n  const saveUserData = () => {\n    if (currentUser) {\n      const userData = {\n        messages,\n        moodHistory,\n        currentMood,\n        lastSaved: new Date().toISOString()\n      };\n      saveToStorage(`user_${currentUser.id}`, userData);\n    }\n  };\n\n  // Authentication handlers\n  const handleLogin = userData => {\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n    saveToStorage('currentUser', userData);\n    loadUserData(userData.id);\n\n    // Welcome message\n    const welcomeMessage = {\n      id: Date.now(),\n      text: `Welcome back, ${userData.name}! I'm here to support you. How are you feeling today?`,\n      sender: 'ai',\n      timestamp: new Date().toISOString(),\n      mood: 'neutral'\n    };\n    setMessages(prev => [...prev, welcomeMessage]);\n  };\n  const handleSignUp = userData => {\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n    saveToStorage('currentUser', userData);\n\n    // First-time user welcome\n    const welcomeMessages = [{\n      id: Date.now(),\n      text: `Hello ${userData.name}! Welcome to your personal mental health companion. I'm here to listen, support, and help you on your wellness journey.`,\n      sender: 'ai',\n      timestamp: new Date().toISOString(),\n      mood: 'neutral'\n    }, {\n      id: Date.now() + 1,\n      text: \"I can help you track your moods, practice breathing exercises, and provide emotional support. Feel free to share how you're feeling or what's on your mind.\",\n      sender: 'ai',\n      timestamp: new Date().toISOString(),\n      mood: 'neutral'\n    }];\n    setMessages(welcomeMessages);\n    setShowMoodSelector(true);\n  };\n  const handleLogout = () => {\n    saveUserData(); // Save before logout\n    setIsAuthenticated(false);\n    setCurrentUser(null);\n    setMessages([]);\n    setMoodHistory([]);\n    setCurrentMood('neutral');\n    saveToStorage('currentUser', null);\n    setSidebarOpen(false);\n  };\n\n  // Chat handlers\n  const handleSendMessage = async (messageText, voiceData = null) => {\n    if (!messageText.trim()) return;\n\n    // Create user message\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      sender: 'user',\n      timestamp: new Date().toISOString(),\n      mood: currentMood,\n      voiceData\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      // Detect mood from message\n      const detectedMood = detectMoodFromText(messageText);\n      if (detectedMood !== 'neutral') {\n        updateMood(detectedMood);\n      }\n\n      // Check for crisis keywords\n      const isCrisis = detectCrisisKeywords(messageText);\n\n      // Generate AI response\n      const aiResponseText = await generateAIResponse(messageText, {\n        mood: detectedMood !== 'neutral' ? detectedMood : currentMood,\n        userName: currentUser.name,\n        isCrisis,\n        messageHistory: messages.slice(-5) // Last 5 messages for context\n      });\n\n      // Create AI message\n      const aiMessage = {\n        id: Date.now() + 1,\n        text: aiResponseText,\n        sender: 'ai',\n        timestamp: new Date().toISOString(),\n        mood: detectedMood !== 'neutral' ? detectedMood : currentMood,\n        isCrisis\n      };\n      setMessages(prev => [...prev, aiMessage]);\n\n      // If crisis detected, show emergency resources\n      if (isCrisis) {\n        setTimeout(() => {\n          const crisisMessage = {\n            id: Date.now() + 2,\n            text: \"I'm concerned about you. Here are some immediate resources that can help:\",\n            sender: 'ai',\n            timestamp: new Date().toISOString(),\n            mood: 'concerned',\n            isEmergency: true,\n            emergencyResources: getEmergencyResources()\n          };\n          setMessages(prev => [...prev, crisisMessage]);\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Error generating AI response:', error);\n\n      // Fallback message\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: \"I'm having trouble responding right now, but I'm here for you. Sometimes talking through your feelings can help, even when I can't respond perfectly. How else can I support you?\",\n        sender: 'ai',\n        timestamp: new Date().toISOString(),\n        mood: currentMood,\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Mood handlers\n  const updateMood = newMood => {\n    setCurrentMood(newMood);\n\n    // Add to mood history\n    const moodEntry = {\n      id: Date.now(),\n      mood: newMood,\n      timestamp: new Date().toISOString(),\n      note: ''\n    };\n    setMoodHistory(prev => [...prev, moodEntry]);\n\n    // Auto-suggest wellness activities based on mood\n    if (newMood === 'anxious' || newMood === 'stressed') {\n      setTimeout(() => {\n        const tip = getWellnessTip(newMood);\n        const tipMessage = {\n          id: Date.now(),\n          text: `I noticed you're feeling ${newMood}. Here's something that might help: ${tip}`,\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          mood: newMood,\n          isTip: true\n        };\n        setMessages(prev => [...prev, tipMessage]);\n      }, 2000);\n    }\n  };\n  const handleMoodSelect = (mood, note = '') => {\n    updateMood(mood);\n    setShowMoodSelector(false);\n\n    // Add contextual message based on mood\n    const moodResponses = {\n      happy: \"That's wonderful to hear! What's making you feel so positive today?\",\n      sad: \"I'm sorry you're feeling down. I'm here to listen. Would you like to talk about what's troubling you?\",\n      anxious: \"I understand you're feeling anxious. That can be really difficult. Would you like to try a breathing exercise or talk about what's worrying you?\",\n      stressed: \"Stress can be overwhelming. I'm here to help you work through it. What's been causing you the most stress lately?\",\n      excited: \"I love your energy! What's got you feeling so excited?\",\n      calm: \"It's great that you're feeling peaceful. How did you achieve this sense of calm?\",\n      confused: \"It's okay to feel uncertain sometimes. Would you like to talk through what's confusing you?\",\n      grateful: \"Gratitude is such a positive emotion. What are you feeling thankful for?\"\n    };\n    const responseText = moodResponses[mood] || \"Thank you for sharing how you're feeling. I'm here to support you.\";\n    const moodMessage = {\n      id: Date.now(),\n      text: responseText,\n      sender: 'ai',\n      timestamp: new Date().toISOString(),\n      mood\n    };\n    setMessages(prev => [...prev, moodMessage]);\n  };\n\n  // Wellness handlers\n  const handleBreathingComplete = () => {\n    setShowBreathingExercise(false);\n    const completionMessage = {\n      id: Date.now(),\n      text: \"Great job completing the breathing exercise! How do you feel now? These techniques can be really helpful for managing stress and anxiety.\",\n      sender: 'ai',\n      timestamp: new Date().toISOString(),\n      mood: 'calm'\n    };\n    setMessages(prev => [...prev, completionMessage]);\n  };\n\n  // Sidebar handlers\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n  const handleSidebarAction = action => {\n    switch (action) {\n      case 'mood':\n        setShowMoodSelector(true);\n        break;\n      case 'breathing':\n        setShowBreathingExercise(true);\n        break;\n      case 'wellness':\n        setShowWellnessTools(true);\n        break;\n      case 'clear':\n        if (window.confirm('Are you sure you want to clear all messages? This cannot be undone.')) {\n          setMessages([]);\n        }\n        break;\n      case 'export':\n        exportChatData();\n        break;\n      case 'logout':\n        if (window.confirm('Are you sure you want to log out?')) {\n          handleLogout();\n        }\n        break;\n      default:\n        break;\n    }\n    setSidebarOpen(false);\n  };\n  const exportChatData = () => {\n    const exportData = {\n      user: currentUser.name,\n      exportDate: new Date().toISOString(),\n      messages: messages.filter(m => m.sender === 'user'),\n      // Only export user messages for privacy\n      moodHistory,\n      currentMood\n    };\n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n    const exportFileDefaultName = `mental-health-data-${new Date().toISOString().split('T')[0]}.json`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n\n  // Render authentication screens\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-md w-full\",\n        children: authMode === 'login' ? /*#__PURE__*/_jsxDEV(LoginForm, {\n          onLogin: handleLogin,\n          onSwitchToSignUp: () => setAuthMode('signup')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(SignUpForm, {\n          onSignUp: handleSignUp,\n          onSwitchToLogin: () => setAuthMode('login')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main app interface\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isOpen: sidebarOpen,\n      onClose: () => setSidebarOpen(false),\n      onAction: handleSidebarAction,\n      currentUser: currentUser,\n      currentMood: currentMood,\n      moodHistory: moodHistory,\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        user: currentUser,\n        onMenuClick: toggleSidebar,\n        onMoodClick: () => setShowMoodSelector(true),\n        currentMood: currentMood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 relative\",\n        children: /*#__PURE__*/_jsxDEV(ChatInterface, {\n          messages: messages,\n          onSendMessage: handleSendMessage,\n          isLoading: isLoading,\n          currentMood: currentMood\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), showMoodSelector && /*#__PURE__*/_jsxDEV(MoodSelector, {\n      currentMood: currentMood,\n      onMoodSelect: handleMoodSelect,\n      onClose: () => setShowMoodSelector(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }, this), showBreathingExercise && /*#__PURE__*/_jsxDEV(BreathingExercise, {\n      onComplete: handleBreathingComplete,\n      onClose: () => setShowBreathingExercise(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this), showWellnessTools && /*#__PURE__*/_jsxDEV(WellnessTools, {\n      currentMood: currentMood,\n      moodHistory: moodHistory,\n      onClose: () => setShowWellnessTools(false),\n      onStartBreathing: () => {\n        setShowWellnessTools(false);\n        setShowBreathingExercise(true);\n      },\n      onSelectMood: () => {\n        setShowWellnessTools(false);\n        setShowMoodSelector(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 380,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"za7s8W9crbGSML4FQZOPrS3dC/s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoginForm","SignUpForm","ChatInterface","Header","Sidebar","MoodSelector","BreathingExercise","WellnessTools","saveToStorage","loadFromStorage","generateAIResponse","detectMoodFromText","detectCrisisKeywords","getWellnessTip","getEmergencyResources","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","currentUser","setCurrentUser","authMode","setAuthMode","messages","setMessages","currentMood","setCurrentMood","isLoading","setIsLoading","sidebarOpen","setSidebarOpen","showBreathingExercise","setShowBreathingExercise","showWellnessTools","setShowWellnessTools","showMoodSelector","setShowMoodSelector","moodHistory","setMoodHistory","initializeApp","saveUserData","savedUser","loadUserData","id","hasShownMoodSelector","userId","userData","lastSaved","Date","toISOString","handleLogin","welcomeMessage","now","text","name","sender","timestamp","mood","prev","handleSignUp","welcomeMessages","handleLogout","handleSendMessage","messageText","voiceData","trim","userMessage","detectedMood","updateMood","isCrisis","aiResponseText","userName","messageHistory","slice","aiMessage","setTimeout","crisisMessage","isEmergency","emergencyResources","error","console","errorMessage","isError","newMood","moodEntry","note","tip","tipMessage","isTip","handleMoodSelect","moodResponses","happy","sad","anxious","stressed","excited","calm","confused","grateful","responseText","moodMessage","handleBreathingComplete","completionMessage","toggleSidebar","handleSidebarAction","action","window","confirm","exportChatData","exportData","user","exportDate","filter","m","dataStr","JSON","stringify","dataUri","encodeURIComponent","exportFileDefaultName","split","linkElement","document","createElement","setAttribute","click","className","children","onLogin","onSwitchToSignUp","fileName","_jsxFileName","lineNumber","columnNumber","onSignUp","onSwitchToLogin","isOpen","onClose","onAction","onMenuClick","onMoodClick","onSendMessage","onMoodSelect","onComplete","onStartBreathing","onSelectMood","_c","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/mental-health-bot/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// Import components\nimport LoginForm from './components/Auth/LoginForm';\nimport SignUpForm from './components/Auth/SignUpForm';\nimport ChatInterface from './components/Chat/ChatInterface';\nimport Header from './components/UI/Header';\nimport Sidebar from './components/UI/Sidebar';\nimport MoodSelector from './components/Wellness/MoodSelector';\nimport BreathingExercise from './components/Wellness/BreathingExercise';\nimport WellnessTools from './components/Wellness/WellnessTools';\n\n// Import services\nimport { saveToStorage, loadFromStorage } from './services/localStorage';\nimport { generateAIResponse } from './services/llmApi';\n\n// Import utilities\nimport { detectMoodFromText, detectCrisisKeywords, getWellnessTip, getEmergencyResources } from './utils/helpers';\n\nfunction App() {\n  // Authentication state\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [authMode, setAuthMode] = useState('login'); // 'login' or 'signup'\n\n  // Chat state\n  const [messages, setMessages] = useState([]);\n  const [currentMood, setCurrentMood] = useState('neutral');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // UI state\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showBreathingExercise, setShowBreathingExercise] = useState(false);\n  const [showWellnessTools, setShowWellnessTools] = useState(false);\n  const [showMoodSelector, setShowMoodSelector] = useState(false);\n\n  // Mood history for tracking\n  const [moodHistory, setMoodHistory] = useState([]);\n\n  // Initialize app on mount\n  useEffect(() => {\n    initializeApp();\n  }, []);\n\n  // Save data when user or messages change\n  useEffect(() => {\n    if (currentUser) {\n      saveUserData();\n    }\n  }, [currentUser, messages, moodHistory]);\n\n  const initializeApp = () => {\n    // Check for existing user session\n    const savedUser = loadFromStorage('currentUser');\n    if (savedUser) {\n      setCurrentUser(savedUser);\n      setIsAuthenticated(true);\n      loadUserData(savedUser.id);\n    }\n\n    // Show mood selector for first-time users\n    const hasShownMoodSelector = loadFromStorage('hasShownMoodSelector');\n    if (!hasShownMoodSelector && savedUser) {\n      setShowMoodSelector(true);\n      saveToStorage('hasShownMoodSelector', true);\n    }\n  };\n\n  const loadUserData = (userId) => {\n    const userData = loadFromStorage(`user_${userId}`);\n    if (userData) {\n      setMessages(userData.messages || []);\n      setMoodHistory(userData.moodHistory || []);\n      setCurrentMood(userData.currentMood || 'neutral');\n    }\n  };\n\n  const saveUserData = () => {\n    if (currentUser) {\n      const userData = {\n        messages,\n        moodHistory,\n        currentMood,\n        lastSaved: new Date().toISOString()\n      };\n      saveToStorage(`user_${currentUser.id}`, userData);\n    }\n  };\n\n  // Authentication handlers\n  const handleLogin = (userData) => {\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n    saveToStorage('currentUser', userData);\n    loadUserData(userData.id);\n    \n    // Welcome message\n    const welcomeMessage = {\n      id: Date.now(),\n      text: `Welcome back, ${userData.name}! I'm here to support you. How are you feeling today?`,\n      sender: 'ai',\n      timestamp: new Date().toISOString(),\n      mood: 'neutral'\n    };\n    setMessages(prev => [...prev, welcomeMessage]);\n  };\n\n  const handleSignUp = (userData) => {\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n    saveToStorage('currentUser', userData);\n    \n    // First-time user welcome\n    const welcomeMessages = [\n      {\n        id: Date.now(),\n        text: `Hello ${userData.name}! Welcome to your personal mental health companion. I'm here to listen, support, and help you on your wellness journey.`,\n        sender: 'ai',\n        timestamp: new Date().toISOString(),\n        mood: 'neutral'\n      },\n      {\n        id: Date.now() + 1,\n        text: \"I can help you track your moods, practice breathing exercises, and provide emotional support. Feel free to share how you're feeling or what's on your mind.\",\n        sender: 'ai',\n        timestamp: new Date().toISOString(),\n        mood: 'neutral'\n      }\n    ];\n    setMessages(welcomeMessages);\n    setShowMoodSelector(true);\n  };\n\n  const handleLogout = () => {\n    saveUserData(); // Save before logout\n    setIsAuthenticated(false);\n    setCurrentUser(null);\n    setMessages([]);\n    setMoodHistory([]);\n    setCurrentMood('neutral');\n    saveToStorage('currentUser', null);\n    setSidebarOpen(false);\n  };\n\n  // Chat handlers\n  const handleSendMessage = async (messageText, voiceData = null) => {\n    if (!messageText.trim()) return;\n\n    // Create user message\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      sender: 'user',\n      timestamp: new Date().toISOString(),\n      mood: currentMood,\n      voiceData\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      // Detect mood from message\n      const detectedMood = detectMoodFromText(messageText);\n      if (detectedMood !== 'neutral') {\n        updateMood(detectedMood);\n      }\n\n      // Check for crisis keywords\n      const isCrisis = detectCrisisKeywords(messageText);\n      \n      // Generate AI response\n      const aiResponseText = await generateAIResponse(messageText, {\n        mood: detectedMood !== 'neutral' ? detectedMood : currentMood,\n        userName: currentUser.name,\n        isCrisis,\n        messageHistory: messages.slice(-5) // Last 5 messages for context\n      });\n\n      // Create AI message\n      const aiMessage = {\n        id: Date.now() + 1,\n        text: aiResponseText,\n        sender: 'ai',\n        timestamp: new Date().toISOString(),\n        mood: detectedMood !== 'neutral' ? detectedMood : currentMood,\n        isCrisis\n      };\n\n      setMessages(prev => [...prev, aiMessage]);\n\n      // If crisis detected, show emergency resources\n      if (isCrisis) {\n        setTimeout(() => {\n          const crisisMessage = {\n            id: Date.now() + 2,\n            text: \"I'm concerned about you. Here are some immediate resources that can help:\",\n            sender: 'ai',\n            timestamp: new Date().toISOString(),\n            mood: 'concerned',\n            isEmergency: true,\n            emergencyResources: getEmergencyResources()\n          };\n          setMessages(prev => [...prev, crisisMessage]);\n        }, 1000);\n      }\n\n    } catch (error) {\n      console.error('Error generating AI response:', error);\n      \n      // Fallback message\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: \"I'm having trouble responding right now, but I'm here for you. Sometimes talking through your feelings can help, even when I can't respond perfectly. How else can I support you?\",\n        sender: 'ai',\n        timestamp: new Date().toISOString(),\n        mood: currentMood,\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Mood handlers\n  const updateMood = (newMood) => {\n    setCurrentMood(newMood);\n    \n    // Add to mood history\n    const moodEntry = {\n      id: Date.now(),\n      mood: newMood,\n      timestamp: new Date().toISOString(),\n      note: ''\n    };\n    \n    setMoodHistory(prev => [...prev, moodEntry]);\n\n    // Auto-suggest wellness activities based on mood\n    if (newMood === 'anxious' || newMood === 'stressed') {\n      setTimeout(() => {\n        const tip = getWellnessTip(newMood);\n        const tipMessage = {\n          id: Date.now(),\n          text: `I noticed you're feeling ${newMood}. Here's something that might help: ${tip}`,\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          mood: newMood,\n          isTip: true\n        };\n        setMessages(prev => [...prev, tipMessage]);\n      }, 2000);\n    }\n  };\n\n  const handleMoodSelect = (mood, note = '') => {\n    updateMood(mood);\n    setShowMoodSelector(false);\n\n    // Add contextual message based on mood\n    const moodResponses = {\n      happy: \"That's wonderful to hear! What's making you feel so positive today?\",\n      sad: \"I'm sorry you're feeling down. I'm here to listen. Would you like to talk about what's troubling you?\",\n      anxious: \"I understand you're feeling anxious. That can be really difficult. Would you like to try a breathing exercise or talk about what's worrying you?\",\n      stressed: \"Stress can be overwhelming. I'm here to help you work through it. What's been causing you the most stress lately?\",\n      excited: \"I love your energy! What's got you feeling so excited?\",\n      calm: \"It's great that you're feeling peaceful. How did you achieve this sense of calm?\",\n      confused: \"It's okay to feel uncertain sometimes. Would you like to talk through what's confusing you?\",\n      grateful: \"Gratitude is such a positive emotion. What are you feeling thankful for?\"\n    };\n\n    const responseText = moodResponses[mood] || \"Thank you for sharing how you're feeling. I'm here to support you.\";\n    \n    const moodMessage = {\n      id: Date.now(),\n      text: responseText,\n      sender: 'ai',\n      timestamp: new Date().toISOString(),\n      mood\n    };\n    \n    setMessages(prev => [...prev, moodMessage]);\n  };\n\n  // Wellness handlers\n  const handleBreathingComplete = () => {\n    setShowBreathingExercise(false);\n    \n    const completionMessage = {\n      id: Date.now(),\n      text: \"Great job completing the breathing exercise! How do you feel now? These techniques can be really helpful for managing stress and anxiety.\",\n      sender: 'ai',\n      timestamp: new Date().toISOString(),\n      mood: 'calm'\n    };\n    \n    setMessages(prev => [...prev, completionMessage]);\n  };\n\n  // Sidebar handlers\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n\n  const handleSidebarAction = (action) => {\n    switch (action) {\n      case 'mood':\n        setShowMoodSelector(true);\n        break;\n      case 'breathing':\n        setShowBreathingExercise(true);\n        break;\n      case 'wellness':\n        setShowWellnessTools(true);\n        break;\n      case 'clear':\n        if (window.confirm('Are you sure you want to clear all messages? This cannot be undone.')) {\n          setMessages([]);\n        }\n        break;\n      case 'export':\n        exportChatData();\n        break;\n      case 'logout':\n        if (window.confirm('Are you sure you want to log out?')) {\n          handleLogout();\n        }\n        break;\n      default:\n        break;\n    }\n    setSidebarOpen(false);\n  };\n\n  const exportChatData = () => {\n    const exportData = {\n      user: currentUser.name,\n      exportDate: new Date().toISOString(),\n      messages: messages.filter(m => m.sender === 'user'), // Only export user messages for privacy\n      moodHistory,\n      currentMood\n    };\n    \n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    const exportFileDefaultName = `mental-health-data-${new Date().toISOString().split('T')[0]}.json`;\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n\n  // Render authentication screens\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full\">\n          {authMode === 'login' ? (\n            <LoginForm \n              onLogin={handleLogin}\n              onSwitchToSignUp={() => setAuthMode('signup')}\n            />\n          ) : (\n            <SignUpForm \n              onSignUp={handleSignUp}\n              onSwitchToLogin={() => setAuthMode('login')}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Main app interface\n  return (\n    <div className=\"flex h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        onAction={handleSidebarAction}\n        currentUser={currentUser}\n        currentMood={currentMood}\n        moodHistory={moodHistory}\n        messages={messages}\n      />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <Header \n          user={currentUser}\n          onMenuClick={toggleSidebar}\n          onMoodClick={() => setShowMoodSelector(true)}\n          currentMood={currentMood}\n        />\n        \n        {/* Chat Interface */}\n        <div className=\"flex-1 relative\">\n          <ChatInterface \n            messages={messages}\n            onSendMessage={handleSendMessage}\n            isLoading={isLoading}\n            currentMood={currentMood}\n          />\n        </div>\n      </div>\n\n      {/* Modals */}\n      {showMoodSelector && (\n        <MoodSelector \n          currentMood={currentMood}\n          onMoodSelect={handleMoodSelect}\n          onClose={() => setShowMoodSelector(false)}\n        />\n      )}\n      \n      {showBreathingExercise && (\n        <BreathingExercise \n          onComplete={handleBreathingComplete}\n          onClose={() => setShowBreathingExercise(false)}\n        />\n      )}\n      \n      {showWellnessTools && (\n        <WellnessTools \n          currentMood={currentMood}\n          moodHistory={moodHistory}\n          onClose={() => setShowWellnessTools(false)}\n          onStartBreathing={() => {\n            setShowWellnessTools(false);\n            setShowBreathingExercise(true);\n          }}\n          onSelectMood={() => {\n            setShowWellnessTools(false);\n            setShowMoodSelector(true);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}