{"ast":null,"code":"// src/utils/helpers.js\nimport { moods, validationPatterns } from './constants';\n\n// Date and time utilities\nexport const formatTimestamp = timestamp => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n  if (diffInMinutes < 10080) return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  return date.toLocaleDateString();\n};\nexport const formatTime = timestamp => {\n  return new Date(timestamp).toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const formatDate = timestamp => {\n  return new Date(timestamp).toLocaleDateString([], {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\nexport const isToday = timestamp => {\n  const today = new Date();\n  const date = new Date(timestamp);\n  return today.toDateString() === date.toDateString();\n};\nexport const isYesterday = timestamp => {\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  const date = new Date(timestamp);\n  return yesterday.toDateString() === date.toDateString();\n};\n\n// Validation utilities\nexport const validateEmail = email => {\n  return validationPatterns.email.test(email);\n};\nexport const validatePassword = password => {\n  return validationPatterns.password.test(password);\n};\nexport const validateName = name => {\n  return validationPatterns.name.test(name);\n};\nexport const getValidationErrors = formData => {\n  const errors = {};\n  if (formData.name !== undefined && !validateName(formData.name)) {\n    errors.name = 'Name must be 2-50 characters and contain only letters';\n  }\n  if (formData.email !== undefined && !validateEmail(formData.email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n  if (formData.password !== undefined && !validatePassword(formData.password)) {\n    errors.password = 'Password must be at least 6 characters with letters and numbers';\n  }\n  if (formData.confirmPassword !== undefined && formData.password !== formData.confirmPassword) {\n    errors.confirmPassword = 'Passwords do not match';\n  }\n  return errors;\n};\n\n// Mood utilities\nexport const getMoodByName = moodName => {\n  return moods[moodName] || moods.neutral;\n};\nexport const getMoodColor = moodName => {\n  const mood = getMoodByName(moodName);\n  return mood.color;\n};\nexport const getMoodEmoji = moodName => {\n  const mood = getMoodByName(moodName);\n  return mood.emoji;\n};\nexport const detectMoodFromText = text => {\n  const lowerText = text.toLowerCase();\n\n  // Define mood keywords\n  const moodKeywords = {\n    happy: ['happy', 'joy', 'great', 'amazing', 'wonderful', 'excited', 'fantastic', 'good', 'positive', 'cheerful'],\n    sad: ['sad', 'down', 'depressed', 'blue', 'miserable', 'heartbroken', 'disappointed', 'gloomy', 'melancholy'],\n    anxious: ['anxious', 'worried', 'nervous', 'panic', 'scared', 'fearful', 'uneasy', 'apprehensive', 'tense'],\n    stressed: ['stressed', 'overwhelmed', 'pressure', 'burden', 'exhausted', 'tired', 'swamped', 'frazzled'],\n    calm: ['calm', 'peaceful', 'relaxed', 'serene', 'tranquil', 'zen', 'centered', 'balanced'],\n    excited: ['excited', 'thrilled', 'enthusiastic', 'energetic', 'pumped', 'eager', 'elated'],\n    confused: ['confused', 'puzzled', 'uncertain', 'lost', 'unclear', 'bewildered', 'perplexed'],\n    grateful: ['grateful', 'thankful', 'blessed', 'appreciative', 'fortunate', 'lucky']\n  };\n  let maxScore = 0;\n  let detectedMood = 'neutral';\n  Object.keys(moodKeywords).forEach(mood => {\n    const keywords = moodKeywords[mood];\n    let score = 0;\n    keywords.forEach(keyword => {\n      if (lowerText.includes(keyword)) {\n        score++;\n      }\n    });\n    if (score > maxScore) {\n      maxScore = score;\n      detectedMood = mood;\n    }\n  });\n  return detectedMood;\n};\n\n// Text utilities\nexport const truncateText = (text, maxLength) => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};\nexport const capitalizeFirst = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nexport const sanitizeInput = input => {\n  return input.trim().replace(/[<>]/g, '');\n};\nexport const countWords = text => {\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n};\n\n// Array utilities\nexport const shuffleArray = array => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\nexport const getRandomItem = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\nexport const groupBy = (array, key) => {\n  return array.reduce((groups, item) => {\n    const group = typeof key === 'function' ? key(item) : item[key];\n    if (!groups[group]) {\n      groups[group] = [];\n    }\n    groups[group].push(item);\n    return groups;\n  }, {});\n};\n\n// Storage utilities\nexport const getDataSize = data => {\n  return new Blob([JSON.stringify(data)]).size;\n};\nexport const formatBytes = (bytes, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\n// Color utilities\nexport const hexToRgb = hex => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n};\nexport const rgbToHex = (r, g, b) => {\n  return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n};\n\n// URL utilities\nexport const getQueryParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  const result = {};\n  for (let [key, value] of params) {\n    result[key] = value;\n  }\n  return result;\n};\nexport const setQueryParam = (key, value) => {\n  const url = new URL(window.location);\n  url.searchParams.set(key, value);\n  window.history.pushState({}, '', url);\n};\n\n// Device utilities\nexport const isMobile = () => {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n};\nexport const isTablet = () => {\n  return /iPad|Android/i.test(navigator.userAgent) && window.innerWidth >= 768;\n};\nexport const isDesktop = () => {\n  return !isMobile() && !isTablet();\n};\n\n// Performance utilities\nexport const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\nexport const throttle = (func, limit) => {\n  let inThrottle;\n  return function () {\n    const args = arguments;\n    const context = this;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\n\n// Analytics utilities\nexport const getMoodDistribution = moodHistory => {\n  const distribution = {};\n  moodHistory.forEach(entry => {\n    const mood = entry.mood || 'neutral';\n    distribution[mood] = (distribution[mood] || 0) + 1;\n  });\n  return distribution;\n};\nexport const getChatStatistics = messages => {\n  const stats = {\n    totalMessages: messages.length,\n    userMessages: messages.filter(m => m.sender === 'user').length,\n    aiMessages: messages.filter(m => m.sender === 'ai').length,\n    averageWordsPerMessage: 0,\n    mostActiveDay: null,\n    longestStreak: 0\n  };\n  if (stats.userMessages > 0) {\n    const totalWords = messages.filter(m => m.sender === 'user').reduce((sum, m) => sum + countWords(m.text), 0);\n    stats.averageWordsPerMessage = Math.round(totalWords / stats.userMessages);\n  }\n\n  // Group messages by date\n  const messagesByDate = groupBy(messages, msg => new Date(msg.timestamp).toDateString());\n\n  // Find most active day\n  let maxMessages = 0;\n  Object.keys(messagesByDate).forEach(date => {\n    if (messagesByDate[date].length > maxMessages) {\n      maxMessages = messagesByDate[date].length;\n      stats.mostActiveDay = date;\n    }\n  });\n  return stats;\n};\n\n// Export utilities\nexport const downloadJSON = (data, filename) => {\n  const dataStr = JSON.stringify(data, null, 2);\n  const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n  const exportFileDefaultName = filename + '.json';\n  const linkElement = document.createElement('a');\n  linkElement.setAttribute('href', dataUri);\n  linkElement.setAttribute('download', exportFileDefaultName);\n  linkElement.click();\n};\nexport const downloadCSV = (data, filename) => {\n  const csvContent = \"data:text/csv;charset=utf-8,\" + data;\n  const encodedUri = encodeURI(csvContent);\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"href\", encodedUri);\n  link.setAttribute(\"download\", filename + \".csv\");\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n// Crisis detection\nexport const detectCrisisKeywords = text => {\n  const crisisKeywords = ['suicide', 'kill myself', 'end it all', 'not worth living', 'want to die', 'hurt myself', 'self harm', 'cutting', 'overdose', 'end my life', 'nobody cares', 'hopeless', 'worthless', 'better off dead'];\n  const lowerText = text.toLowerCase();\n  return crisisKeywords.some(keyword => lowerText.includes(keyword));\n};\n\n// Wellness utilities\nexport const getWellnessTip = mood => {\n  const tips = {\n    anxious: [\"Try the 4-7-8 breathing technique: inhale for 4, hold for 7, exhale for 8\", \"Ground yourself using the 5-4-3-2-1 technique: name 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, 1 you can taste\", \"Take a warm shower or bath to help relax your muscles\", \"Write down your worries to get them out of your head\"],\n    sad: [\"Reach out to a friend or family member you trust\", \"Go for a walk in nature, even if it's just for 10 minutes\", \"Listen to uplifting music or watch something that makes you smile\", \"Practice gratitude by writing down 3 things you're thankful for\"],\n    stressed: [\"Break large tasks into smaller, manageable steps\", \"Take regular breaks throughout your day\", \"Try progressive muscle relaxation\", \"Prioritize your tasks and focus on what's most important\"],\n    happy: [\"Share your positive energy with others\", \"Take time to appreciate this moment\", \"Consider what led to this happiness and how to maintain it\", \"Use this energy to tackle something you've been putting off\"],\n    neutral: [\"Check in with yourself - how are you really feeling?\", \"Take a few deep breaths and center yourself\", \"Consider doing something kind for yourself today\", \"Reflect on your goals and what you want to accomplish\"]\n  };\n  const moodTips = tips[mood] || tips.neutral;\n  return getRandomItem(moodTips);\n};\n\n// Emergency resources\nexport const getEmergencyResources = () => {\n  return {\n    crisis: {\n      title: \"Crisis Hotlines\",\n      resources: [{\n        name: \"National Suicide Prevention Lifeline\",\n        number: \"988\",\n        available: \"24/7\"\n      }, {\n        name: \"Crisis Text Line\",\n        number: \"Text HOME to 741741\",\n        available: \"24/7\"\n      }, {\n        name: \"SAMHSA National Helpline\",\n        number: \"1-800-662-4357\",\n        available: \"24/7\"\n      }]\n    },\n    support: {\n      title: \"Support Resources\",\n      resources: [{\n        name: \"NAMI (National Alliance on Mental Illness)\",\n        website: \"nami.org\"\n      }, {\n        name: \"Mental Health America\",\n        website: \"mhanational.org\"\n      }, {\n        name: \"Psychology Today Therapist Finder\",\n        website: \"psychologytoday.com\"\n      }]\n    }\n  };\n};","map":{"version":3,"names":["moods","validationPatterns","formatTimestamp","timestamp","date","Date","now","diffInMinutes","Math","floor","toLocaleDateString","formatTime","toLocaleTimeString","hour","minute","formatDate","year","month","day","isToday","today","toDateString","isYesterday","yesterday","setDate","getDate","validateEmail","email","test","validatePassword","password","validateName","name","getValidationErrors","formData","errors","undefined","confirmPassword","getMoodByName","moodName","neutral","getMoodColor","mood","color","getMoodEmoji","emoji","detectMoodFromText","text","lowerText","toLowerCase","moodKeywords","happy","sad","anxious","stressed","calm","excited","confused","grateful","maxScore","detectedMood","Object","keys","forEach","keywords","score","keyword","includes","truncateText","maxLength","length","substring","capitalizeFirst","str","charAt","toUpperCase","slice","sanitizeInput","input","trim","replace","countWords","split","filter","word","shuffleArray","array","shuffled","i","j","random","getRandomItem","groupBy","key","reduce","groups","item","group","push","getDataSize","data","Blob","JSON","stringify","size","formatBytes","bytes","decimals","k","dm","sizes","log","parseFloat","pow","toFixed","hexToRgb","hex","result","exec","r","parseInt","g","b","rgbToHex","toString","getQueryParams","params","URLSearchParams","window","location","search","value","setQueryParam","url","URL","searchParams","set","history","pushState","isMobile","navigator","userAgent","isTablet","innerWidth","isDesktop","debounce","func","wait","timeout","executedFunction","args","later","clearTimeout","setTimeout","throttle","limit","inThrottle","arguments","context","apply","getMoodDistribution","moodHistory","distribution","entry","getChatStatistics","messages","stats","totalMessages","userMessages","m","sender","aiMessages","averageWordsPerMessage","mostActiveDay","longestStreak","totalWords","sum","round","messagesByDate","msg","maxMessages","downloadJSON","filename","dataStr","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","document","createElement","setAttribute","click","downloadCSV","csvContent","encodedUri","encodeURI","link","body","appendChild","removeChild","detectCrisisKeywords","crisisKeywords","some","getWellnessTip","tips","moodTips","getEmergencyResources","crisis","title","resources","number","available","support","website"],"sources":["C:/Users/moham/OneDrive/Desktop/mental-health-bot/src/utils/helpers.js"],"sourcesContent":["// src/utils/helpers.js\r\nimport { moods, validationPatterns } from './constants';\r\n\r\n// Date and time utilities\r\nexport const formatTimestamp = (timestamp) => {\r\n  const date = new Date(timestamp);\r\n  const now = new Date();\r\n  const diffInMinutes = Math.floor((now - date) / (1000 * 60));\r\n  \r\n  if (diffInMinutes < 1) return 'Just now';\r\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\r\n  if (diffInMinutes < 10080) return `${Math.floor(diffInMinutes / 1440)}d ago`;\r\n  \r\n  return date.toLocaleDateString();\r\n};\r\n\r\nexport const formatTime = (timestamp) => {\r\n  return new Date(timestamp).toLocaleTimeString([], { \r\n    hour: '2-digit', \r\n    minute: '2-digit' \r\n  });\r\n};\r\n\r\nexport const formatDate = (timestamp) => {\r\n  return new Date(timestamp).toLocaleDateString([], {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  });\r\n};\r\n\r\nexport const isToday = (timestamp) => {\r\n  const today = new Date();\r\n  const date = new Date(timestamp);\r\n  return today.toDateString() === date.toDateString();\r\n};\r\n\r\nexport const isYesterday = (timestamp) => {\r\n  const yesterday = new Date();\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n  const date = new Date(timestamp);\r\n  return yesterday.toDateString() === date.toDateString();\r\n};\r\n\r\n// Validation utilities\r\nexport const validateEmail = (email) => {\r\n  return validationPatterns.email.test(email);\r\n};\r\n\r\nexport const validatePassword = (password) => {\r\n  return validationPatterns.password.test(password);\r\n};\r\n\r\nexport const validateName = (name) => {\r\n  return validationPatterns.name.test(name);\r\n};\r\n\r\nexport const getValidationErrors = (formData) => {\r\n  const errors = {};\r\n  \r\n  if (formData.name !== undefined && !validateName(formData.name)) {\r\n    errors.name = 'Name must be 2-50 characters and contain only letters';\r\n  }\r\n  \r\n  if (formData.email !== undefined && !validateEmail(formData.email)) {\r\n    errors.email = 'Please enter a valid email address';\r\n  }\r\n  \r\n  if (formData.password !== undefined && !validatePassword(formData.password)) {\r\n    errors.password = 'Password must be at least 6 characters with letters and numbers';\r\n  }\r\n  \r\n  if (formData.confirmPassword !== undefined && formData.password !== formData.confirmPassword) {\r\n    errors.confirmPassword = 'Passwords do not match';\r\n  }\r\n  \r\n  return errors;\r\n};\r\n\r\n// Mood utilities\r\nexport const getMoodByName = (moodName) => {\r\n  return moods[moodName] || moods.neutral;\r\n};\r\n\r\nexport const getMoodColor = (moodName) => {\r\n  const mood = getMoodByName(moodName);\r\n  return mood.color;\r\n};\r\n\r\nexport const getMoodEmoji = (moodName) => {\r\n  const mood = getMoodByName(moodName);\r\n  return mood.emoji;\r\n};\r\n\r\nexport const detectMoodFromText = (text) => {\r\n  const lowerText = text.toLowerCase();\r\n  \r\n  // Define mood keywords\r\n  const moodKeywords = {\r\n    happy: ['happy', 'joy', 'great', 'amazing', 'wonderful', 'excited', 'fantastic', 'good', 'positive', 'cheerful'],\r\n    sad: ['sad', 'down', 'depressed', 'blue', 'miserable', 'heartbroken', 'disappointed', 'gloomy', 'melancholy'],\r\n    anxious: ['anxious', 'worried', 'nervous', 'panic', 'scared', 'fearful', 'uneasy', 'apprehensive', 'tense'],\r\n    stressed: ['stressed', 'overwhelmed', 'pressure', 'burden', 'exhausted', 'tired', 'swamped', 'frazzled'],\r\n    calm: ['calm', 'peaceful', 'relaxed', 'serene', 'tranquil', 'zen', 'centered', 'balanced'],\r\n    excited: ['excited', 'thrilled', 'enthusiastic', 'energetic', 'pumped', 'eager', 'elated'],\r\n    confused: ['confused', 'puzzled', 'uncertain', 'lost', 'unclear', 'bewildered', 'perplexed'],\r\n    grateful: ['grateful', 'thankful', 'blessed', 'appreciative', 'fortunate', 'lucky']\r\n  };\r\n  \r\n  let maxScore = 0;\r\n  let detectedMood = 'neutral';\r\n  \r\n  Object.keys(moodKeywords).forEach(mood => {\r\n    const keywords = moodKeywords[mood];\r\n    let score = 0;\r\n    \r\n    keywords.forEach(keyword => {\r\n      if (lowerText.includes(keyword)) {\r\n        score++;\r\n      }\r\n    });\r\n    \r\n    if (score > maxScore) {\r\n      maxScore = score;\r\n      detectedMood = mood;\r\n    }\r\n  });\r\n  \r\n  return detectedMood;\r\n};\r\n\r\n// Text utilities\r\nexport const truncateText = (text, maxLength) => {\r\n  if (text.length <= maxLength) return text;\r\n  return text.substring(0, maxLength) + '...';\r\n};\r\n\r\nexport const capitalizeFirst = (str) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\nexport const sanitizeInput = (input) => {\r\n  return input.trim().replace(/[<>]/g, '');\r\n};\r\n\r\nexport const countWords = (text) => {\r\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\r\n};\r\n\r\n// Array utilities\r\nexport const shuffleArray = (array) => {\r\n  const shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n};\r\n\r\nexport const getRandomItem = (array) => {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n};\r\n\r\nexport const groupBy = (array, key) => {\r\n  return array.reduce((groups, item) => {\r\n    const group = typeof key === 'function' ? key(item) : item[key];\r\n    if (!groups[group]) {\r\n      groups[group] = [];\r\n    }\r\n    groups[group].push(item);\r\n    return groups;\r\n  }, {});\r\n};\r\n\r\n// Storage utilities\r\nexport const getDataSize = (data) => {\r\n  return new Blob([JSON.stringify(data)]).size;\r\n};\r\n\r\nexport const formatBytes = (bytes, decimals = 2) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  \r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n};\r\n\r\n// Color utilities\r\nexport const hexToRgb = (hex) => {\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result ? {\r\n    r: parseInt(result[1], 16),\r\n    g: parseInt(result[2], 16),\r\n    b: parseInt(result[3], 16)\r\n  } : null;\r\n};\r\n\r\nexport const rgbToHex = (r, g, b) => {\r\n  return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n};\r\n\r\n// URL utilities\r\nexport const getQueryParams = () => {\r\n  const params = new URLSearchParams(window.location.search);\r\n  const result = {};\r\n  for (let [key, value] of params) {\r\n    result[key] = value;\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const setQueryParam = (key, value) => {\r\n  const url = new URL(window.location);\r\n  url.searchParams.set(key, value);\r\n  window.history.pushState({}, '', url);\r\n};\r\n\r\n// Device utilities\r\nexport const isMobile = () => {\r\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n};\r\n\r\nexport const isTablet = () => {\r\n  return /iPad|Android/i.test(navigator.userAgent) && window.innerWidth >= 768;\r\n};\r\n\r\nexport const isDesktop = () => {\r\n  return !isMobile() && !isTablet();\r\n};\r\n\r\n// Performance utilities\r\nexport const debounce = (func, wait) => {\r\n  let timeout;\r\n  return function executedFunction(...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n};\r\n\r\nexport const throttle = (func, limit) => {\r\n  let inThrottle;\r\n  return function() {\r\n    const args = arguments;\r\n    const context = this;\r\n    if (!inThrottle) {\r\n      func.apply(context, args);\r\n      inThrottle = true;\r\n      setTimeout(() => inThrottle = false, limit);\r\n    }\r\n  };\r\n};\r\n\r\n// Analytics utilities\r\nexport const getMoodDistribution = (moodHistory) => {\r\n  const distribution = {};\r\n  \r\n  moodHistory.forEach(entry => {\r\n    const mood = entry.mood || 'neutral';\r\n    distribution[mood] = (distribution[mood] || 0) + 1;\r\n  });\r\n  \r\n  return distribution;\r\n};\r\n\r\nexport const getChatStatistics = (messages) => {\r\n  const stats = {\r\n    totalMessages: messages.length,\r\n    userMessages: messages.filter(m => m.sender === 'user').length,\r\n    aiMessages: messages.filter(m => m.sender === 'ai').length,\r\n    averageWordsPerMessage: 0,\r\n    mostActiveDay: null,\r\n    longestStreak: 0\r\n  };\r\n  \r\n  if (stats.userMessages > 0) {\r\n    const totalWords = messages\r\n      .filter(m => m.sender === 'user')\r\n      .reduce((sum, m) => sum + countWords(m.text), 0);\r\n    stats.averageWordsPerMessage = Math.round(totalWords / stats.userMessages);\r\n  }\r\n  \r\n  // Group messages by date\r\n  const messagesByDate = groupBy(messages, (msg) => \r\n    new Date(msg.timestamp).toDateString()\r\n  );\r\n  \r\n  // Find most active day\r\n  let maxMessages = 0;\r\n  Object.keys(messagesByDate).forEach(date => {\r\n    if (messagesByDate[date].length > maxMessages) {\r\n      maxMessages = messagesByDate[date].length;\r\n      stats.mostActiveDay = date;\r\n    }\r\n  });\r\n  \r\n  return stats;\r\n};\r\n\r\n// Export utilities\r\nexport const downloadJSON = (data, filename) => {\r\n  const dataStr = JSON.stringify(data, null, 2);\r\n  const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n  const exportFileDefaultName = filename + '.json';\r\n  \r\n  const linkElement = document.createElement('a');\r\n  linkElement.setAttribute('href', dataUri);\r\n  linkElement.setAttribute('download', exportFileDefaultName);\r\n  linkElement.click();\r\n};\r\n\r\nexport const downloadCSV = (data, filename) => {\r\n  const csvContent = \"data:text/csv;charset=utf-8,\" + data;\r\n  const encodedUri = encodeURI(csvContent);\r\n  const link = document.createElement(\"a\");\r\n  link.setAttribute(\"href\", encodedUri);\r\n  link.setAttribute(\"download\", filename + \".csv\");\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n};\r\n\r\n// Crisis detection\r\nexport const detectCrisisKeywords = (text) => {\r\n  const crisisKeywords = [\r\n    'suicide', 'kill myself', 'end it all', 'not worth living', 'want to die',\r\n    'hurt myself', 'self harm', 'cutting', 'overdose', 'end my life',\r\n    'nobody cares', 'hopeless', 'worthless', 'better off dead'\r\n  ];\r\n  \r\n  const lowerText = text.toLowerCase();\r\n  return crisisKeywords.some(keyword => lowerText.includes(keyword));\r\n};\r\n\r\n// Wellness utilities\r\nexport const getWellnessTip = (mood) => {\r\n  const tips = {\r\n    anxious: [\r\n      \"Try the 4-7-8 breathing technique: inhale for 4, hold for 7, exhale for 8\",\r\n      \"Ground yourself using the 5-4-3-2-1 technique: name 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, 1 you can taste\",\r\n      \"Take a warm shower or bath to help relax your muscles\",\r\n      \"Write down your worries to get them out of your head\"\r\n    ],\r\n    sad: [\r\n      \"Reach out to a friend or family member you trust\",\r\n      \"Go for a walk in nature, even if it's just for 10 minutes\",\r\n      \"Listen to uplifting music or watch something that makes you smile\",\r\n      \"Practice gratitude by writing down 3 things you're thankful for\"\r\n    ],\r\n    stressed: [\r\n      \"Break large tasks into smaller, manageable steps\",\r\n      \"Take regular breaks throughout your day\",\r\n      \"Try progressive muscle relaxation\",\r\n      \"Prioritize your tasks and focus on what's most important\"\r\n    ],\r\n    happy: [\r\n      \"Share your positive energy with others\",\r\n      \"Take time to appreciate this moment\",\r\n      \"Consider what led to this happiness and how to maintain it\",\r\n      \"Use this energy to tackle something you've been putting off\"\r\n    ],\r\n    neutral: [\r\n      \"Check in with yourself - how are you really feeling?\",\r\n      \"Take a few deep breaths and center yourself\",\r\n      \"Consider doing something kind for yourself today\",\r\n      \"Reflect on your goals and what you want to accomplish\"\r\n    ]\r\n  };\r\n  \r\n  const moodTips = tips[mood] || tips.neutral;\r\n  return getRandomItem(moodTips);\r\n};\r\n\r\n// Emergency resources\r\nexport const getEmergencyResources = () => {\r\n  return {\r\n    crisis: {\r\n      title: \"Crisis Hotlines\",\r\n      resources: [\r\n        { name: \"National Suicide Prevention Lifeline\", number: \"988\", available: \"24/7\" },\r\n        { name: \"Crisis Text Line\", number: \"Text HOME to 741741\", available: \"24/7\" },\r\n        { name: \"SAMHSA National Helpline\", number: \"1-800-662-4357\", available: \"24/7\" }\r\n      ]\r\n    },\r\n    support: {\r\n      title: \"Support Resources\",\r\n      resources: [\r\n        { name: \"NAMI (National Alliance on Mental Illness)\", website: \"nami.org\" },\r\n        { name: \"Mental Health America\", website: \"mhanational.org\" },\r\n        { name: \"Psychology Today Therapist Finder\", website: \"psychologytoday.com\" }\r\n      ]\r\n    }\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}