{"ast":null,"code":"// src/services/localStorage.js\n\n// User Authentication\nexport const saveUser = user => {\n  try {\n    localStorage.setItem('currentUser', JSON.stringify(user));\n\n    // Save join date if first time\n    const joinDateKey = `user_join_date_${user.email}`;\n    if (!localStorage.getItem(joinDateKey)) {\n      localStorage.setItem(joinDateKey, new Date().toISOString());\n    }\n    return true;\n  } catch (error) {\n    console.error('Error saving user:', error);\n    return false;\n  }\n};\nexport const getCurrentUser = () => {\n  try {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  } catch (error) {\n    console.error('Error getting current user:', error);\n    return null;\n  }\n};\nexport const logoutUser = () => {\n  try {\n    localStorage.removeItem('currentUser');\n    return true;\n  } catch (error) {\n    console.error('Error logging out user:', error);\n    return false;\n  }\n};\n\n// User Registration\nexport const registerUser = userData => {\n  try {\n    const users = getUsers();\n\n    // Check if user already exists\n    const existingUser = users.find(user => user.email === userData.email);\n    if (existingUser) {\n      throw new Error('User already exists with this email');\n    }\n    const newUser = {\n      id: Date.now().toString(),\n      ...userData,\n      createdAt: new Date().toISOString(),\n      lastLogin: new Date().toISOString()\n    };\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    return newUser;\n  } catch (error) {\n    console.error('Error registering user:', error);\n    throw error;\n  }\n};\nexport const loginUser = (email, password) => {\n  try {\n    const users = getUsers();\n    const user = users.find(user => user.email === email && user.password === password);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Update last login\n    user.lastLogin = new Date().toISOString();\n    const userIndex = users.findIndex(u => u.id === user.id);\n    users[userIndex] = user;\n    localStorage.setItem('users', JSON.stringify(users));\n\n    // Don't save password in current user session\n    const {\n      password: _,\n      ...userWithoutPassword\n    } = user;\n    saveUser(userWithoutPassword);\n    return userWithoutPassword;\n  } catch (error) {\n    console.error('Error logging in user:', error);\n    throw error;\n  }\n};\nconst getUsers = () => {\n  try {\n    const users = localStorage.getItem('users');\n    return users ? JSON.parse(users) : [];\n  } catch (error) {\n    console.error('Error getting users:', error);\n    return [];\n  }\n};\n\n// Messages\nexport const saveMessage = (userEmail, message) => {\n  try {\n    const key = `messages_${userEmail}`;\n    const existingMessages = getMessages(userEmail);\n    const newMessage = {\n      id: Date.now().toString(),\n      ...message,\n      timestamp: new Date().toISOString()\n    };\n    existingMessages.push(newMessage);\n    localStorage.setItem(key, JSON.stringify(existingMessages));\n    return newMessage;\n  } catch (error) {\n    console.error('Error saving message:', error);\n    return null;\n  }\n};\nexport const getMessages = userEmail => {\n  try {\n    const key = `messages_${userEmail}`;\n    const messages = localStorage.getItem(key);\n    return messages ? JSON.parse(messages) : [];\n  } catch (error) {\n    console.error('Error getting messages:', error);\n    return [];\n  }\n};\nexport const deleteMessages = userEmail => {\n  try {\n    const key = `messages_${userEmail}`;\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error('Error deleting messages:', error);\n    return false;\n  }\n};\n\n// Mood History\nexport const saveMoodEntry = (userEmail, moodData) => {\n  try {\n    const key = `mood_history_${userEmail}`;\n    const existingMoods = getMoodHistory(userEmail);\n    const newMoodEntry = {\n      id: Date.now().toString(),\n      ...moodData,\n      timestamp: new Date().toISOString()\n    };\n    existingMoods.push(newMoodEntry);\n\n    // Keep only last 30 entries to avoid storage bloat\n    const recentMoods = existingMoods.slice(-30);\n    localStorage.setItem(key, JSON.stringify(recentMoods));\n    return newMoodEntry;\n  } catch (error) {\n    console.error('Error saving mood entry:', error);\n    return null;\n  }\n};\nexport const getMoodHistory = userEmail => {\n  try {\n    const key = `mood_history_${userEmail}`;\n    const moods = localStorage.getItem(key);\n    return moods ? JSON.parse(moods) : [];\n  } catch (error) {\n    console.error('Error getting mood history:', error);\n    return [];\n  }\n};\nexport const deleteMoodHistory = userEmail => {\n  try {\n    const key = `mood_history_${userEmail}`;\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error('Error deleting mood history:', error);\n    return false;\n  }\n};\n\n// App Settings\nexport const saveAppSettings = settings => {\n  try {\n    localStorage.setItem('appSettings', JSON.stringify(settings));\n    return true;\n  } catch (error) {\n    console.error('Error saving app settings:', error);\n    return false;\n  }\n};\nexport const getAppSettings = () => {\n  try {\n    const settings = localStorage.getItem('appSettings');\n    return settings ? JSON.parse(settings) : {\n      theme: 'light',\n      notifications: true,\n      voiceEnabled: true,\n      autoSpeak: false\n    };\n  } catch (error) {\n    console.error('Error getting app settings:', error);\n    return {\n      theme: 'light',\n      notifications: true,\n      voiceEnabled: true,\n      autoSpeak: false\n    };\n  }\n};\n\n// Chat Sessions\nexport const saveChatSession = (userEmail, sessionData) => {\n  try {\n    const key = `chat_sessions_${userEmail}`;\n    const existingSessions = getChatSessions(userEmail);\n    const newSession = {\n      id: Date.now().toString(),\n      ...sessionData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    existingSessions.push(newSession);\n\n    // Keep only last 10 sessions\n    const recentSessions = existingSessions.slice(-10);\n    localStorage.setItem(key, JSON.stringify(recentSessions));\n    return newSession;\n  } catch (error) {\n    console.error('Error saving chat session:', error);\n    return null;\n  }\n};\nexport const getChatSessions = userEmail => {\n  try {\n    const key = `chat_sessions_${userEmail}`;\n    const sessions = localStorage.getItem(key);\n    return sessions ? JSON.parse(sessions) : [];\n  } catch (error) {\n    console.error('Error getting chat sessions:', error);\n    return [];\n  }\n};\n\n// Wellness Activities\nexport const saveWellnessActivity = (userEmail, activityData) => {\n  try {\n    const key = `wellness_activities_${userEmail}`;\n    const existingActivities = getWellnessActivities(userEmail);\n    const newActivity = {\n      id: Date.now().toString(),\n      ...activityData,\n      timestamp: new Date().toISOString()\n    };\n    existingActivities.push(newActivity);\n\n    // Keep only last 50 activities\n    const recentActivities = existingActivities.slice(-50);\n    localStorage.setItem(key, JSON.stringify(recentActivities));\n    return newActivity;\n  } catch (error) {\n    console.error('Error saving wellness activity:', error);\n    return null;\n  }\n};\nexport const getWellnessActivities = userEmail => {\n  try {\n    const key = `wellness_activities_${userEmail}`;\n    const activities = localStorage.getItem(key);\n    return activities ? JSON.parse(activities) : [];\n  } catch (error) {\n    console.error('Error getting wellness activities:', error);\n    return [];\n  }\n};\n\n// Clear all user data (for logout/reset)\nexport const clearUserData = userEmail => {\n  try {\n    const keys = [`messages_${userEmail}`, `mood_history_${userEmail}`, `chat_sessions_${userEmail}`, `wellness_activities_${userEmail}`, `user_join_date_${userEmail}`];\n    keys.forEach(key => {\n      localStorage.removeItem(key);\n    });\n    return true;\n  } catch (error) {\n    console.error('Error clearing user data:', error);\n    return false;\n  }\n};\n\n// Export all data for backup\nexport const exportUserData = userEmail => {\n  try {\n    const userData = {\n      messages: getMessages(userEmail),\n      moodHistory: getMoodHistory(userEmail),\n      chatSessions: getChatSessions(userEmail),\n      wellnessActivities: getWellnessActivities(userEmail),\n      joinDate: localStorage.getItem(`user_join_date_${userEmail}`),\n      exportDate: new Date().toISOString()\n    };\n    return userData;\n  } catch (error) {\n    console.error('Error exporting user data:', error);\n    return null;\n  }\n};\nexport default {\n  // User management\n  saveUser,\n  getCurrentUser,\n  logoutUser,\n  registerUser,\n  loginUser,\n  // Messages\n  saveMessage,\n  getMessages,\n  deleteMessages,\n  // Mood tracking\n  saveMoodEntry,\n  getMoodHistory,\n  deleteMoodHistory,\n  // Settings\n  saveAppSettings,\n  getAppSettings,\n  // Sessions\n  saveChatSession,\n  getChatSessions,\n  // Wellness\n  saveWellnessActivity,\n  getWellnessActivities,\n  // Utilities\n  clearUserData,\n  exportUserData\n};","map":{"version":3,"names":["saveUser","user","localStorage","setItem","JSON","stringify","joinDateKey","email","getItem","Date","toISOString","error","console","getCurrentUser","parse","logoutUser","removeItem","registerUser","userData","users","getUsers","existingUser","find","Error","newUser","id","now","toString","createdAt","lastLogin","push","loginUser","password","userIndex","findIndex","u","_","userWithoutPassword","saveMessage","userEmail","message","key","existingMessages","getMessages","newMessage","timestamp","messages","deleteMessages","saveMoodEntry","moodData","existingMoods","getMoodHistory","newMoodEntry","recentMoods","slice","moods","deleteMoodHistory","saveAppSettings","settings","getAppSettings","theme","notifications","voiceEnabled","autoSpeak","saveChatSession","sessionData","existingSessions","getChatSessions","newSession","updatedAt","recentSessions","sessions","saveWellnessActivity","activityData","existingActivities","getWellnessActivities","newActivity","recentActivities","activities","clearUserData","keys","forEach","exportUserData","moodHistory","chatSessions","wellnessActivities","joinDate","exportDate"],"sources":["C:/Users/moham/OneDrive/Desktop/mental-health-bot/src/services/localStorage.js"],"sourcesContent":["// src/services/localStorage.js\r\n\r\n// User Authentication\r\nexport const saveUser = (user) => {\r\n  try {\r\n    localStorage.setItem('currentUser', JSON.stringify(user));\r\n    \r\n    // Save join date if first time\r\n    const joinDateKey = `user_join_date_${user.email}`;\r\n    if (!localStorage.getItem(joinDateKey)) {\r\n      localStorage.setItem(joinDateKey, new Date().toISOString());\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving user:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  try {\r\n    const user = localStorage.getItem('currentUser');\r\n    return user ? JSON.parse(user) : null;\r\n  } catch (error) {\r\n    console.error('Error getting current user:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  try {\r\n    localStorage.removeItem('currentUser');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error logging out user:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// User Registration\r\nexport const registerUser = (userData) => {\r\n  try {\r\n    const users = getUsers();\r\n    \r\n    // Check if user already exists\r\n    const existingUser = users.find(user => user.email === userData.email);\r\n    if (existingUser) {\r\n      throw new Error('User already exists with this email');\r\n    }\r\n    \r\n    const newUser = {\r\n      id: Date.now().toString(),\r\n      ...userData,\r\n      createdAt: new Date().toISOString(),\r\n      lastLogin: new Date().toISOString()\r\n    };\r\n    \r\n    users.push(newUser);\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    \r\n    return newUser;\r\n  } catch (error) {\r\n    console.error('Error registering user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const loginUser = (email, password) => {\r\n  try {\r\n    const users = getUsers();\r\n    const user = users.find(user => user.email === email && user.password === password);\r\n    \r\n    if (!user) {\r\n      throw new Error('Invalid email or password');\r\n    }\r\n    \r\n    // Update last login\r\n    user.lastLogin = new Date().toISOString();\r\n    const userIndex = users.findIndex(u => u.id === user.id);\r\n    users[userIndex] = user;\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    \r\n    // Don't save password in current user session\r\n    const { password: _, ...userWithoutPassword } = user;\r\n    saveUser(userWithoutPassword);\r\n    \r\n    return userWithoutPassword;\r\n  } catch (error) {\r\n    console.error('Error logging in user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getUsers = () => {\r\n  try {\r\n    const users = localStorage.getItem('users');\r\n    return users ? JSON.parse(users) : [];\r\n  } catch (error) {\r\n    console.error('Error getting users:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Messages\r\nexport const saveMessage = (userEmail, message) => {\r\n  try {\r\n    const key = `messages_${userEmail}`;\r\n    const existingMessages = getMessages(userEmail);\r\n    \r\n    const newMessage = {\r\n      id: Date.now().toString(),\r\n      ...message,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    existingMessages.push(newMessage);\r\n    localStorage.setItem(key, JSON.stringify(existingMessages));\r\n    \r\n    return newMessage;\r\n  } catch (error) {\r\n    console.error('Error saving message:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getMessages = (userEmail) => {\r\n  try {\r\n    const key = `messages_${userEmail}`;\r\n    const messages = localStorage.getItem(key);\r\n    return messages ? JSON.parse(messages) : [];\r\n  } catch (error) {\r\n    console.error('Error getting messages:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const deleteMessages = (userEmail) => {\r\n  try {\r\n    const key = `messages_${userEmail}`;\r\n    localStorage.removeItem(key);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting messages:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Mood History\r\nexport const saveMoodEntry = (userEmail, moodData) => {\r\n  try {\r\n    const key = `mood_history_${userEmail}`;\r\n    const existingMoods = getMoodHistory(userEmail);\r\n    \r\n    const newMoodEntry = {\r\n      id: Date.now().toString(),\r\n      ...moodData,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    existingMoods.push(newMoodEntry);\r\n    \r\n    // Keep only last 30 entries to avoid storage bloat\r\n    const recentMoods = existingMoods.slice(-30);\r\n    \r\n    localStorage.setItem(key, JSON.stringify(recentMoods));\r\n    return newMoodEntry;\r\n  } catch (error) {\r\n    console.error('Error saving mood entry:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getMoodHistory = (userEmail) => {\r\n  try {\r\n    const key = `mood_history_${userEmail}`;\r\n    const moods = localStorage.getItem(key);\r\n    return moods ? JSON.parse(moods) : [];\r\n  } catch (error) {\r\n    console.error('Error getting mood history:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const deleteMoodHistory = (userEmail) => {\r\n  try {\r\n    const key = `mood_history_${userEmail}`;\r\n    localStorage.removeItem(key);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting mood history:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// App Settings\r\nexport const saveAppSettings = (settings) => {\r\n  try {\r\n    localStorage.setItem('appSettings', JSON.stringify(settings));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving app settings:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getAppSettings = () => {\r\n  try {\r\n    const settings = localStorage.getItem('appSettings');\r\n    return settings ? JSON.parse(settings) : {\r\n      theme: 'light',\r\n      notifications: true,\r\n      voiceEnabled: true,\r\n      autoSpeak: false\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting app settings:', error);\r\n    return {\r\n      theme: 'light',\r\n      notifications: true,\r\n      voiceEnabled: true,\r\n      autoSpeak: false\r\n    };\r\n  }\r\n};\r\n\r\n// Chat Sessions\r\nexport const saveChatSession = (userEmail, sessionData) => {\r\n  try {\r\n    const key = `chat_sessions_${userEmail}`;\r\n    const existingSessions = getChatSessions(userEmail);\r\n    \r\n    const newSession = {\r\n      id: Date.now().toString(),\r\n      ...sessionData,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    existingSessions.push(newSession);\r\n    \r\n    // Keep only last 10 sessions\r\n    const recentSessions = existingSessions.slice(-10);\r\n    \r\n    localStorage.setItem(key, JSON.stringify(recentSessions));\r\n    return newSession;\r\n  } catch (error) {\r\n    console.error('Error saving chat session:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getChatSessions = (userEmail) => {\r\n  try {\r\n    const key = `chat_sessions_${userEmail}`;\r\n    const sessions = localStorage.getItem(key);\r\n    return sessions ? JSON.parse(sessions) : [];\r\n  } catch (error) {\r\n    console.error('Error getting chat sessions:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Wellness Activities\r\nexport const saveWellnessActivity = (userEmail, activityData) => {\r\n  try {\r\n    const key = `wellness_activities_${userEmail}`;\r\n    const existingActivities = getWellnessActivities(userEmail);\r\n    \r\n    const newActivity = {\r\n      id: Date.now().toString(),\r\n      ...activityData,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    existingActivities.push(newActivity);\r\n    \r\n    // Keep only last 50 activities\r\n    const recentActivities = existingActivities.slice(-50);\r\n    \r\n    localStorage.setItem(key, JSON.stringify(recentActivities));\r\n    return newActivity;\r\n  } catch (error) {\r\n    console.error('Error saving wellness activity:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getWellnessActivities = (userEmail) => {\r\n  try {\r\n    const key = `wellness_activities_${userEmail}`;\r\n    const activities = localStorage.getItem(key);\r\n    return activities ? JSON.parse(activities) : [];\r\n  } catch (error) {\r\n    console.error('Error getting wellness activities:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Clear all user data (for logout/reset)\r\nexport const clearUserData = (userEmail) => {\r\n  try {\r\n    const keys = [\r\n      `messages_${userEmail}`,\r\n      `mood_history_${userEmail}`,\r\n      `chat_sessions_${userEmail}`,\r\n      `wellness_activities_${userEmail}`,\r\n      `user_join_date_${userEmail}`\r\n    ];\r\n    \r\n    keys.forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing user data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export all data for backup\r\nexport const exportUserData = (userEmail) => {\r\n  try {\r\n    const userData = {\r\n      messages: getMessages(userEmail),\r\n      moodHistory: getMoodHistory(userEmail),\r\n      chatSessions: getChatSessions(userEmail),\r\n      wellnessActivities: getWellnessActivities(userEmail),\r\n      joinDate: localStorage.getItem(`user_join_date_${userEmail}`),\r\n      exportDate: new Date().toISOString()\r\n    };\r\n    \r\n    return userData;\r\n  } catch (error) {\r\n    console.error('Error exporting user data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default {\r\n  // User management\r\n  saveUser,\r\n  getCurrentUser,\r\n  logoutUser,\r\n  registerUser,\r\n  loginUser,\r\n  \r\n  // Messages\r\n  saveMessage,\r\n  getMessages,\r\n  deleteMessages,\r\n  \r\n  // Mood tracking\r\n  saveMoodEntry,\r\n  getMoodHistory,\r\n  deleteMoodHistory,\r\n  \r\n  // Settings\r\n  saveAppSettings,\r\n  getAppSettings,\r\n  \r\n  // Sessions\r\n  saveChatSession,\r\n  getChatSessions,\r\n  \r\n  // Wellness\r\n  saveWellnessActivity,\r\n  getWellnessActivities,\r\n  \r\n  // Utilities\r\n  clearUserData,\r\n  exportUserData\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}